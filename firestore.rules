rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if the document belongs to the current user
    function isOwner() {
      return request.auth.uid == resource.data.userId;
    }
    
    // Helper function for creation requests to ensure userId is set correctly
    function willBeOwner() {
      return request.auth.uid == request.resource.data.userId;
    }

    // Ingredients collection
    match /ingredients/{ingredientId} {
      allow read: if isAuthenticated() && isOwner();
      allow create: if isAuthenticated() && willBeOwner();
      allow update, delete: if isAuthenticated() && isOwner();
    }

    // Recipes collection
    match /recipes/{recipeId} {
      allow read: if isAuthenticated() && isOwner();
      allow create: if isAuthenticated() && willBeOwner();
      allow update, delete: if isAuthenticated() && isOwner();
    }

    // Packaging collection
    match /packaging/{packagingId} {
      allow read: if isAuthenticated() && isOwner();
      allow create: if isAuthenticated() && willBeOwner();
      allow update, delete: if isAuthenticated() && isOwner();
    }

    // Packaging bundles collection
    match /packagingBundles/{bundleId} {
      allow read: if isAuthenticated() && isOwner();
      allow create: if isAuthenticated() && willBeOwner();
      allow update, delete: if isAuthenticated() && isOwner();
    }

    // User profiles collection (for additional user data if needed)
    match /users/{userId} {
      allow read: if isAuthenticated() && request.auth.uid == userId;
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isAuthenticated() && request.auth.uid == userId;
      allow delete: if false; // Prevent profile deletion through client
    }
  }
} 